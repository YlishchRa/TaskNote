@using Domain.Enums;

@{
    ViewData["Title"] = "Home Page";
}

<h3 class ="mb-3 text-muted">Create task</h3>
<form id ="createrTaskForm">
    <div class ="mb-3">
        <label class="form-label">Name task</label>
        <input name="Name" type="text" class="form-control" />
    </div>

    <div>
        <label class="form-label"> Priority </label>
        <select name="Priority" class="form-select mb-3" asp-items="Html.GetEnumSelectList<Priority>()"></select>
    </div>

    <div>
        <label class="form-label">Name task</label>
        <textarea name="Description" type="text" class="form-control" rows="3"> </textarea>
    </div>

    <div>
        <button id="createTask" class="btn btn-primary" style="margin:5px 0px 5px 0px">Create task</button>
    </div>

</form>
<table class="table table-dark table-hover" id="taskTableId">
    <thead>
        <tr>
            <th>Name</th>
            <th>Priority</th>
            <th>Description</th>
            <th>Done</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>

    </tbody>

</table>

@section Scripts
{
    <script type="text/javascript" src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            buttonsStyling: false
        })

        let dataTable = $("#taskTableId").DataTable({
            info: false,
            serverSide: true,
            searching: false,
            paging: false,
            sorting: false,
            ajax:{
                url: "@Url.Action("TaskHandler")",
                method: 'POST',
                data: null
            },
            columns: [
                {data: 'name'},
                {data: 'priority' },
                { data: 'description' },
                { data: 'isDone' },
                {
                    data: null,
                    sortable: false,
                    render: function(data, type)
                    {
                        return `<button class="btn btn-success btn-sm center-block">Perform</button>`
                    }
                }
            ],
            createdRow: function(nRow,data)
            {
                var handlerComplete = function()
                {
                    swalWithBootstrapButtons.fire({
                        title: 'Are you sure?',
                        text: "Do you want to finish this task?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, finish it!',
                        cancelButtonText: 'No, cancel!',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.isConfirmed) {

                            $.ajax({
                                type: 'POST',
                                url: '@Url.Action("EndTask")',
                                data: { id: data.id },
                                success: function (responce) {
                                    Swal.fire({
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Information',
                                        text: responce.description,
                                        showConfirmButton: false,
                                        timer: 1500
                                    })
                                    dataTable.clear().draw()
                                },
                                error: function (responce) {
                                    Swal.fire({
                                        position: 'top-end',
                                        icon: 'error',
                                        title: 'Information',
                                        text: responce.responseJSON.description,
                                        showConfirmButton: false,
                                        timer: 1500
                                    })
                                }


                            })

                            //
                            // me code
                            //
                        } else if (
                            /* Read more about handling dismissals below */
                            result.dismiss === Swal.DismissReason.cancel
                        ) {
                            swalWithBootstrapButtons.fire(
                                'Cancelled',
                                'OK :)',
                                'error'
                            )
                        }
                    })
                }



                for (var i = 0; i < dataTable.columns().header().length - 1; i++ )
                {
                   $('td',nRow).eq(i).css('cursor','pointer');
                    $('td', nRow).eq(i).on('click', null);
                }
                $('td button', nRow).on('click', handlerComplete);

            }
        })







        

        $('#createTask').on('click', function(ex){
            ex.preventDefault();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("Create","Task")',
                data: $('#createrTaskForm').serialize(),
                success: function(responce)
                {
                    Swal.fire({
                        position: 'top-end',
                        icon: 'success',
                        title: 'Information',
                        text: responce.description,
                        showConfirmButton: false,
                        timer: 1500
                    })
                    dataTable.clear().draw()

                },
                error: function(responce)
                {
                    Swal.fire({
                        position: 'top-end',
                        icon: 'error',
                        title: 'Information',
                        text: responce.responseJSON.description,
                        showConfirmButton: false,
                        timer: 1500
                    })
                }

            })
        });

    </script>
}